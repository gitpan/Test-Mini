=for comment Documentation generated by YARD v0.6.1 and yard-pod-plugin v0.1.

=head1 NAME

Test::Mini::TestCase - Base class for Test::Mini test cases

=head1 METHODS

=head2 Class Methods

=over

=item B<<<< new >>>>

    new($class, %args) # => Object 


Constructor.



Parameters:

=over

=item *

(I<<<< Hash >>>>) B<<<<< C<<<< %args >>>> >>>>> -- Initial state for
the new instance.


=back







Valid Options for C<%args>:

=over

=item *

B<<<<< name >>>>> -- The specific test this instance should run.


=back

=back

=head2 Instance Methods

=over

=item B<<<< run >>>>

    run # => Object 


Runs the test specified at construction time.  This method is
responsible for invoking the setup and teardown advice for the method,
in addition to ensuring that any fatal errors encountered by the program
are suitably handled.  Appropriate diagnostic information should be sent
to the supplied C<<<< $runner >>>>.



Parameters:

=over

=item *

(I<<<< Test::Mini::Runner >>>>) B<<<<< C<<<< $runner >>>> >>>>> 


=back


Returns:

=over

=item *

The number of assertions called by this test.


=back

=item B<<<< setup >>>>

    setup($self) # => Object 


Test setup behavior, automatically invoked prior to each test.  Intended
to be overridden by subclasses.


Examples:

    package TestSomething;
    use base 'Test::Mini::TestCase';
    
    use Something;
    
    sub setup { $obj = Something->new(); }
    
    sub test_can_foo {
        assert_can($obj, 'foo');
    }


See Also:

=over

=item *

L<<<< S<<<<< #teardown >>>>>|Test::Mini::TestCase/teardown >>>>


=back

=item B<<<< teardown >>>>

    teardown($self) # => Object 


Test teardown behavior, automatically invoked following each test. 
Intended to be overridden by subclasses.


Examples:

    package Test;
    use base 'Test::Mini::TestCase';
    
    sub teardown { unlink 'foo.bar' }
    
    sub test_touching_files {
        `touch foo.bar`;
        assert(-f 'foo.bar');
    }


See Also:

=over

=item *

L<<<< S<<<<< #setup >>>>>|Test::Mini::TestCase/setup >>>>


=back

=back

