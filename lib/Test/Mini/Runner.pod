=for comment Documentation generated by YARD v0.6.1 and yard-pod-plugin v0.1.

=head1 NAME

Test::Mini::Runner - Default Test Runner

=head1 DESCRIPTION

The Test::Mini::Runner is responsible for finding and running the
appropriate tests, setting up output logging, and returning an
appropriate status code.  For those looking to write tests with this
framework, the points of note are as follows:



=over

=item *

Tests are run automatically at process exit.


=item *

All test cases (subclasses of L<<<< S<<<<< Test::Mini::TestCase >>>>> |
Test::Mini::TestCase >>>>) that have been loaded at that time will be
considered.  This includes indirect subclasses.


=item *

Within each test case, all methods defined with a name matching C<<<<
/^test.+/ >>>> will be run.


=over

=item *

Each test will run in its own test case instance.


=back



=over

=item *

Tests will be run in random order.


=back



=over

=item *

#setup will be called before each test is run.


=back



=over

=item *

#teardown will be called after each test is run.


=back



=over

=item *

Inherited tests are B<<<< not >>>> run.


=back



=item *

Tests may be run via C<<<< `prove` >>>>, by loading (via C<<<< use >>>>,
C<<<< do >>>> or C<<<< require >>>>) the files into another script, or
by simply executing a file containing a test case in the Perl
interpreter.


=over

=item *

If you want to use a non-TAP output logger, C<<<< `prove` >>>> is not an
option.


=back



=item *

Options may be passed in either as command line options, or as
environment variables.


=over

=item *

Environment variable names are prefixed with 'TEST_MINI_'.


=back



=over

=item *

Valid options are:


=over

=item *

C<<<< verbose >>>> - Specifies the logger's verbosity.


=back



=over

=item *

C<<<< filter >>>> - Only tests with names matching this pattern should
be run.


=back



=over

=item *

C<<<< logger >>>> - Specifies an alternate output logger class.


=back



=over

=item *

C<<<< seed >>>> - Specifies a random number seed; used to specify
repeatable test orderings.


=back



=back



=back

=head1 METHODS

=head2 Attribute Accessors

=over

=item B<<<< exit_code >>>>

    - exit_code($self) # => Object 


Exit code, representing the status of the test run.




Returns:

=over

Exit code, representing the status of the test run.


=back

=item B<<<< filter >>>>

    - filter($self) # => Object 


Test name filter.




Returns:

=over

Test name filter.


=back

=item B<<<< logger >>>>

    - logger($self) # => Object 


Logger instance.




Returns:

=over

Logger instance.


=back

=item B<<<< seed >>>>

    - seed($self) # => Object 


Randomness seed.




Returns:

=over

Randomness seed.


=back

=item B<<<< verbose >>>>

    - verbose($self) # => Object 


Logger verbosity.




Returns:

=over

Logger verbosity.


=back

=back

=head2 Test Run Hooks

=over

=item B<<<< run >>>>

    - run($self) # => Object 


Begins the test run. Loads and instantiates the test output logger, then
dispatches to L<<<< S<<<<< #run_test_suite >>>>> | / run_test_suite >>>>
(passing the L<<<< S<<<<< #filter >>>>> | / filter >>>> and L<<<< S<<<<<
#seed >>>>> | / seed >>>>, as appropriate).




Returns:

=over

The result of the L<<<< S<<<<< #run_test_suite >>>>> | /
run_test_suite >>>> call.


=back

=item B<<<< run_test >>>>

    - run_test($self, $tc, $test) # => Integer 


Runs a specific test.



Parameters:

=over

C<<<< $tc >>>> (I<<<< Class >>>>) - The test case owning the test
method.


C<<<< $test >>>> (I<<<< String >>>>) - The name of the test method
to be run.


=back


Returns:

=over

(I<<<< Integer >>>>) - The number of assertions called by the test.


=back

=item B<<<< run_test_case >>>>

    - run_test_case($self, $tc, @tests) # => Object 


Runs tests in a test case.



Parameters:

=over

C<<<< $tc >>>> (I<<<< Class >>>>) - The test case to run.


C<<<< @tests >>>> (I<<<< Array<String> >>>>) - A list of tests to be
run.


=back

=item B<<<< run_test_suite >>>>

    - run_test_suite($self, %args) # => Object 


Runs the test suite. Finds subclasses of L<<<< S<<<<<
Test::Mini::TestCase >>>>> | Test::Mini::TestCase >>>>, and dispatches
to L<<<< S<<<<< #run_test_case >>>>> | / run_test_case >>>> with the
name of each test case and a list test methods to be run.



Parameters:

=over

C<<<< %args >>>> (I<<<< Hash >>>>) 


=back







Valid Options for C<%args>:

=over

filter (I<<<< String >>>>) - Test name filter.


seed (I<<<< String >>>>) - Randomness seed.


=back


Returns:

=over

The value of L<<<< S<<<<< #exit_code >>>>> | / exit_code >>>>.


=back

=back

=head2 Callbacks

=over

=item B<<<< error >>>>

    - error($self, $tc, $test, $e) # => Object 


Callback for dying tests.



Parameters:

=over

C<<<< $tc >>>> (I<<<< Class >>>>) - The test case owning the test
method.


C<<<< $test >>>> (I<<<< String >>>>) - The name of the test with an
error.


C<<<< $e >>>> (I<<<< Test::Mini::Exception >>>>) - The exception
object.


=back

=item B<<<< fail >>>>

    - fail($self, $tc, $test, $e) # => Object 


Callback for failing tests.



Parameters:

=over

C<<<< $tc >>>> (I<<<< Class >>>>) - The test case owning the test
method.


C<<<< $test >>>> (I<<<< String >>>>) - The name of the failed test.


C<<<< $e >>>> (I<<<< Test::Mini::Exception::Assert >>>>) - The
exception object.


=back

=item B<<<< pass >>>>

    - pass($self, $tc, $test) # => Object 


Callback for passing tests.



Parameters:

=over

C<<<< $tc >>>> (I<<<< Class >>>>) - The test case owning the test
method.


C<<<< $test >>>> (I<<<< String >>>>) - The name of the passing test.


=back

=item B<<<< skip >>>>

    - skip($self, $tc, $test, $e) # => Object 


Callback for skipped tests.



Parameters:

=over

C<<<< $tc >>>> (I<<<< Class >>>>) - The test case owning the test
method.


C<<<< $test >>>> (I<<<< String >>>>) - The name of the skipped test.


C<<<< $e >>>> (I<<<< Test::Mini::Exception::Skip >>>>) - The
exception object.


=back

=back

=head2 Class Methods

=over

=item B<<<< new >>>>

    + new($class, %args) # => Object 


Constructor. Arguments may be provided explicitly to the constructor or
implicitly via either @ARGV (parsed by L<<<< S<<<<< Getopt::Long >>>>> |
Getopt::Long >>>>) or environment variables ("TEST_MINI_$option").



Parameters:

=over

C<<<< %args >>>> (I<<<< Hash >>>>) - Initial state for the new
instance.


=back







Valid Options for C<%args>:

=over

verbose - Logger verbosity.  Defaults to C<<<<< 0 >>>>>.


filter (I<<<< String >>>>) - Test name filter.  Defaults to C<<<<<
'' >>>>>.


logger (I<<<< Class >>>>) - Logger class name.  Defaults to C<<<<<
Test::Mini::Logger::TAP >>>>>.


seed (I<<<< Integer >>>>) - Randomness seed.  Defaults to a random
number C<<<< < 64_000_000 >>>>
.


=back

=back

